import express from 'express';
import PDFDocument from 'pdfkit';
import fs from 'fs';
import Supplier from '../models/Supplier.js';
import SupplierOrder from '../models/SupplierOrder.js';

const router = express.Router();

router.get('/', async (req, res) => {
    const { startDate, endDate } = req.query; // Get date range from query params
    const doc = new PDFDocument();
    const filePath = 'SupplierReport.pdf';
    const writeStream = fs.createWriteStream(filePath);

    writeStream.on('error', (err) => {
        console.error("File write error:", err);
        res.status(500).json({ message: 'Error generating PDF report' });
    });

    writeStream.on('finish', () => {
        console.log("PDF file generated successfully.");
        res.download(filePath, (err) => {
            if (err) {
                console.error("Error downloading the file:", err);
                res.status(500).send("Error downloading the file");
            }
            
            fs.unlink(filePath, (err) => {
                if (err) console.error("Error deleting file:", err);
            });
        });
    });

    doc.pipe(writeStream);

    // Header information
    doc.fontSize(25).text('Supplier Report', { align: 'center' });
    doc.moveDown();
    doc.text(`Company Name: Local Helaya`);
    doc.text(`Address: Malabe, Sri Lanka`);
    doc.text(`Generated By: Supplier Manager`);
    doc.text(`Generated Date Range: ${startDate} - ${endDate}`);
    doc.moveDown();

    try {
        // Filter suppliers (you can add a 'registrationDate' field to the Supplier model if needed)
        const supplierQuery = {};
        if (startDate && endDate) {
            supplierQuery.registrationDate = { 
                $gte: new Date(startDate), 
                $lte: new Date(endDate)
            };
        }
        const suppliers = await Supplier.find(supplierQuery);
        const totalSuppliers = suppliers.length;

        // Fetch and filter orders by date
        const orderQuery = {};
        if (startDate && endDate) {
            orderQuery.date = { 
                $gte: new Date(startDate), 
                $lte: new Date(endDate)
            };
        }
        const orders = await SupplierOrder.find(orderQuery).populate('supplierId', 'name');
        const totalOrders = orders.length;

        // Summary section
        doc.fontSize(18).text(`Total Suppliers: ${totalSuppliers}`);
        doc.text(`Total Supplier Orders: ${totalOrders}`);
        doc.moveDown();

        // Supplier details
        if (totalSuppliers > 0) {
            doc.fontSize(20).text('Suppliers', { underline: true });
            doc.moveDown();
            suppliers.forEach((supplier) => {
                doc.text(`Supplier Name: ${supplier.name}`);
                doc.text(`Email: ${supplier.email}`);
                doc.text(`Address: ${supplier.address}`);
                doc.text(`Province: ${supplier.province}`);
                doc.text(`Phone: ${supplier.phone}`);
                doc.text(`Registration Date: ${new Date(supplier.registrationDate).toLocaleDateString()}`);
                doc.moveDown();
            });
        } else {
            doc.fontSize(18).text('No suppliers found in the given date range.');
        }

        // Order details
        if (totalOrders > 0) {
            doc.fontSize(20).text('Orders', { underline: true });
            doc.moveDown();
            orders.forEach((order) => {
                doc.text(`Order ID: ${order._id}`);
                doc.text(`Supplier: ${order.supplierId.name}`);
                doc.text(`Product: ${order.productName}`);
                doc.text(`Quantity: ${order.quantity}`);
                doc.text(`Unit Price: Rs.${order.unitPrice.toFixed(2)}`);
                doc.text(`Total: Rs.${(order.quantity * order.unitPrice).toFixed(2)}`);
                doc.text(`Order Date: ${new Date(order.date).toLocaleDateString()}`);
                doc.moveDown();
            });
        } else {
            doc.fontSize(18).text('No supplier orders found in the given date range.');
        }
    } catch (error) {
        console.error("Error generating report:", error);
        res.status(500).json({ message: 'Error fetching data for report' });
        return;
    }

    doc.end(); // Finalize the PDF document
});

export default router;
